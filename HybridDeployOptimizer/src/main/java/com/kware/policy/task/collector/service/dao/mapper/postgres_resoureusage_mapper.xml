<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 -->
<mapper namespace="resourceUsageMapper">

  <!--     ************************ mo_resource_usage_node *********************************** -->
  
      <insert id="insertResourceUsageNode" parameterType="com.kware.policy.task.collector.service.vo.ResourceUsageNode">
        UPDATE k_hybrid.mo_resource_usage_node
        SET last_at = 'N'
        WHERE cl_uid = #{clUid}
         AND  node_nm = #{nodeNm}
         AND last_at = 'Y';
        
        INSERT INTO k_hybrid.mo_resource_usage_node (
            cl_uid,
            collect_dt,
            node_nm,
            results
        ) VALUES (
            #{clUid},
            #{collectDt},
            #{nodeNm},
            #{results}::jsonb
        )
    </insert>
    
    <sql id="where_selectResourceUsageNode">
        <choose>
            <when test="startDt == null and endDt == null">
                collect_dt &gt;= CURRENT_TIMESTAMP - INTERVAL '30 minutes'
            </when>
            <when test="startDt != null and endDt == null">
                collect_dt &gt;= #{startDt}
            </when>
            <when test="startDt == null and endDt != null">
                collect_dt &lt;= #{endDt}
            </when>
            <otherwise>
                collect_dt BETWEEN #{startDt} AND #{endDt}
            </otherwise>
        </choose>
        <if test="clUid != null">
            AND cl_uid = #{clUid}
        </if>
        <if test="nodeNm != null">
            AND node_nm = #{nodeNm}
        </if>
    </sql>

	<!-- hashmap 를 사용한 이유는 jsonb에서 데이터를 자유롭게 꺼낼 수 있도록 -->
    <select id="selectResourceUsageNodeList" resultType="HashMap">
        SELECT 
            cl_uid,
            collect_dt,
            node_nm,
            results::text,
            reg_dt
        FROM k_hybrid.mo_resource_usage_node 
        WHERE 
        <include refid="where_selectResourceUsageNode"/>
        ORDER BY collect_dt DESC
        <if test="pageNumber != null and pageSize != null">
          LIMIT #{pageSize} OFFSET (#{pageNumber} - 1) * #{pageSize}
        </if>
    </select>

 <!--    <select id="selectResourceUsageNodeAllByClUid" resultType="com.kware.policy.task.collector.service.vo.ResourceUsageNode">
        SELECT 
            cl_uid,
            collect_dt,
            node_nm,
            results,
            reg_dt
        FROM k_hybrid.mo_resource_usage_node 
        WHERE cl_uid = #{clUid}
          AND collect_dt BETWEEN #{startDt} AND #{endDt}
          ORDER BY collect_dt DESC
        <if test="pageNumber != null and pageSize != null">
          LIMIT #{pageSize} OFFSET (#{pageNumber} - 1) * #{pageSize}
        </if>
    </select> -->
  
  
  <!--     ************************ mo_resource_usage_pod *********************************** -->
  <sql id="where_selectResourceUsagePod">
        <choose>
            <when test="startDt == null and endDt == null">
                collect_dt &gt;= CURRENT_TIMESTAMP - INTERVAL '30 minutes'
            </when>
            <when test="startDt != null and endDt == null">
                collect_dt &gt;= #{startDt}
            </when>
            <when test="startDt == null and endDt != null">
                collect_dt &lt;= #{endDt}
            </when>
            <otherwise>
                collect_dt BETWEEN #{startDt} AND #{endDt}
            </otherwise>
        </choose>
        <if test="clUid != null">
            AND cl_uid = #{clUid}
        </if>
        <if test="mlId != null">
            AND ml_id = #{mlId}
        </if>
        <if test="podUid != null">
            AND pod_uid = #{podUid}
        </if>
    </sql>
    
  <insert id="insertResourceUsagePod" parameterType="HashMap">
  		UPDATE  k_hybrid.mo_resource_usage_pod
  		   SET  last_at = 'N'
  		 WHERE cl_uid = #{clUid}
  		   AND ml_id  = #{mlId}
  		   AND pod_uid= #{podUid}
  		   AND last_at = 'Y';
  
        INSERT INTO k_hybrid.mo_resource_usage_pod (
             collect_dt, 
             cl_uid, 
             ml_id, 
             pod_uid, 
             results
         ) VALUES (
             #{collectDt}, 
             #{clUid}, 
             #{mlId}, 
             #{podUid}, 
             #{results}::jsonb
         )
    </insert>

	<!-- hashmap 를 사용한 이유는 jsonb에서 데이터를 자유롭게 꺼낼 수 있도록 -->
    <select id="selectResourceUsagePodList" resultType="HashMap">
        SELECT
            collect_dt,
        	cl_uid,
        	ml_id,
        	pod_uid,
        	results::text,
        	reg_dt 
        FROM k_hybrid.mo_resource_usage_pod 
         WHERE
         <include refid="where_selectResourceUsagePod"/> 
          ORDER BY collect_dt DESC
        <if test="pageNumber != null and pageSize != null">
          LIMIT #{pageSize} OFFSET (#{pageNumber} - 1) * #{pageSize}
        </if>
    </select>

<!--     <select id="selectResourceUsagePodAllByMlId" parameterType="String" resultType="com.kware.policy.task.collector.service.vo.ResourceUsagePod">
        SELECT * FROM k_hybrid.mo_resource_usage_pod 
        WHERE ml_id = #{mlId}
          AND collect_dt BETWEEN #{startDt} AND #{endDt}
    </select>
    -->
    
    <update id="updateClusterWorkloadToUsage_info" parameterType="java.lang.String">
   	<![CDATA[
		   WITH main_agg AS (
			  SELECT
			    results->>'mlId' AS mlid,
			    results->>'pod' AS pod,
			    MIN(results->>'createdTimestamp') AS createdTimestamp,
			    AVG(CASE WHEN (results->>'usageCpu1m')::numeric <> 0 THEN (results->>'usageCpu1m')::numeric END) AS avg_usage_cpu1m,
			    MIN(CASE WHEN (results->>'usageCpu1m')::numeric <> 0 THEN (results->>'usageCpu1m')::numeric END) AS min_usage_cpu1m,
			    MAX(CASE WHEN (results->>'usageCpu1m')::numeric <> 0 THEN (results->>'usageCpu1m')::numeric END) AS max_usage_cpu1m,    
			    AVG(CASE WHEN (results->>'usageMemory')::numeric <> 0 THEN (results->>'usageMemory')::numeric END) AS avg_usage_memory,
			    MIN(CASE WHEN (results->>'usageMemory')::numeric <> 0 THEN (results->>'usageMemory')::numeric END) AS min_usage_memory,
			    MAX(CASE WHEN (results->>'usageMemory')::numeric <> 0 THEN (results->>'usageMemory')::numeric END) AS max_usage_memory,
			    AVG(CASE WHEN (results->>'usageNetworkIo1m')::numeric <> 0 THEN (results->>'usageNetworkIo1m')::numeric END) AS avg_usage_network_io1m,
			    MIN(CASE WHEN (results->>'usageNetworkIo1m')::numeric <> 0 THEN (results->>'usageNetworkIo1m')::numeric END) AS min_usage_network_io1m,
			    MAX(CASE WHEN (results->>'usageNetworkIo1m')::numeric <> 0 THEN (results->>'usageNetworkIo1m')::numeric END) AS max_usage_network_io1m
			  FROM k_hybrid.mo_resource_usage_pod a
			  JOIN k_hybrid.mo_cluster_workload b ON b.ml_id LIKE a.ml_id || '%'
			  WHERE a.results ->> 'statusPhase' = 'RUNNING'
			   AND  a.ml_id = #{value}
			   AND (a.results ->> 'createdTimestamp')::timestamp >= (b.info ->> 'createdAt')::timestamp
			  GROUP BY results->>'mlId', results->>'pod'
			),
			gpu_agg AS (
			  SELECT
			    results->>'mlId' AS mlid,
			    results->>'pod' AS pod,
			    AVG((j.value)::numeric) AS avg_gpu,
			    MIN((j.value)::numeric) AS min_gpu,
			    MAX((j.value)::numeric) AS max_gpu
			  FROM k_hybrid.mo_resource_usage_pod,
			       LATERAL jsonb_each_text(results->'musgeGpuMap') j
			  WHERE (j.value)::numeric <> 0
			  GROUP BY results->>'mlId', results->>'pod'
			),
			combined AS (
			  SELECT
			    m.mlid,
			    m.pod,
			    m.createdTimestamp,
			    m.avg_usage_cpu1m,
			    m.min_usage_cpu1m,
			    m.max_usage_cpu1m,
			    m.avg_usage_memory,
			    m.min_usage_memory,
			    m.max_usage_memory,
			    m.avg_usage_network_io1m,
			    m.min_usage_network_io1m,
			    m.max_usage_network_io1m,
			    g.avg_gpu,
			    g.min_gpu,
			    g.max_gpu
			  FROM main_agg m
			  LEFT JOIN gpu_agg g
			    ON m.mlid = g.mlid AND m.pod = g.pod
			  ORDER BY m.createdTimestamp
			),
			aggregated AS (
			  SELECT
			    mlid,
			    jsonb_agg(
			      jsonb_build_object(
			        'pod', pod,
			        'avg_usage_cpu1m', avg_usage_cpu1m,
			        'min_usage_cpu1m', min_usage_cpu1m,
			        'max_usage_cpu1m', max_usage_cpu1m,
			        'avg_usage_memory', avg_usage_memory,
			        'min_usage_memory', min_usage_memory,
			        'max_usage_memory', max_usage_memory,
			        'avg_usage_network_io1m', avg_usage_network_io1m,
			        'min_usage_network_io1m', min_usage_network_io1m,
			        'max_usage_network_io1m', max_usage_network_io1m,
			        'avg_gpu', avg_gpu,
			        'min_gpu', min_gpu,
			        'max_gpu', max_gpu
			      ) ORDER BY createdTimestamp
			    ) AS pods
			  FROM combined
			  GROUP BY mlid
			)
			UPDATE k_hybrid.mo_cluster_workload t
			SET usage_info = a.pods
			FROM aggregated a
			WHERE t.ml_id like a.mlid || '%'
		]]>
   </update>
  
</mapper>

