<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 이 XML의 구조대로 구현될 클래스의 이름 -->
<mapper namespace="clusterManagerMapper">

<!-- ************************ cluster *************************************  -->
 <!-- Insert -->
  <insert id="insertCluster" parameterType="com.kware.policy.task.collector.service.vo.Cluster">
    INSERT INTO mo_cluster (
        uid
      , nm
      , info
      , memo
      , prom_url
      , hash_val
      , delete_at
      , reg_uid
      , updt_uid
    ) VALUES (
        #{uid}
      , #{nm}
      , #{info}::jsonb
      , #{memo}
      , #{promUrl}
      , #{hashVal}
      , 'N'
      , #{regUid}
      , #{updtUid}
    )
  </insert>

  <!-- Update -->
  <update id="updateCluster" parameterType="com.kware.policy.task.collector.service.vo.Cluster">
    UPDATE mo_cluster
    SET nm        = #{nm}
      , info      = #{info}::jsonb
      , memo      = #{memo}
      , prom_url  = #{promUrl}
      , hash_val  = #{hashVal}
      , delete_at = #{deleteAt} /*다시 갱신되는 경우가 있음*/
      , updt_uid  = #{updtUid}
      , updt_dt   = CURRENT_TIMESTAMP
    WHERE uid     = #{uid}
  </update>

  <!-- Delete -->
  <delete id="deleteCluster" parameterType="com.kware.policy.task.collector.service.vo.Cluster">
    UPDATE mo_cluster
    SET 
        delete_at = 'Y'
      , updt_uid  = #{updtUid}
      , updt_dt   = CURRENT_TIMESTAMP
    WHERE uid     = #{uid}
  </delete>

  <!-- Select -->
  <select id="selectClusterList" resultType="com.kware.policy.task.collector.service.vo.Cluster">
    SELECT uid
         , nm
         , info
         , memo
         , prom_url
         , delete_at
         , hash_val
         , reg_uid
         , reg_dt
         , updt_uid
         , updt_dt
    FROM mo_cluster
    WHERE delete_at = 'N'
  </select>
  
  <select id="selectCluster" resultType="com.kware.policy.task.collector.service.vo.Cluster" parameterType="com.kware.policy.task.collector.service.vo.Cluster">
    SELECT uid
         , nm
         , info
         , memo
         , prom_url
         , delete_at
         , hash_val
         , reg_uid
         , reg_dt
         , updt_uid
         , updt_dt
    FROM mo_cluster
    WHERE uid = #{uid}
  </select>

<!-- ************************ cluster node*************************************  -->
	<!-- Insert -->
  <insert id="insertClusterNode" parameterType="com.kware.policy.task.collector.service.vo.ClusterNode" useGeneratedKeys="true" keyProperty="uid">
    INSERT INTO mo_cluster_node (
          cl_uid
        , nm
        , no_uuid
        , info
        , gpuinfo
        , memo
        , delete_at
        , hash_val
        , reg_uid
        , updt_uid 
    )VALUES (
    	  #{clUid}
    	, #{nm}
    	, #{noUuid}
    	, #{info}::jsonb
    	, #{gpuinfo}::jsonb
    	, #{memo}
    	, 'N'
    	, #{hashVal}
    	, #{regUid}
    	, #{updtUid}
    )
  </insert>

  <select id="selectUidFromClusterNode" resultType="int" parameterType="com.kware.policy.task.collector.service.vo.ClusterNode">
    SELECT uid FROM mo_cluster_node WHERE cl_uid = #{clUid} AND nm = #{nm}
  </select>
  
  <!-- Update -->
  <update id="updateClusterNode" parameterType="com.kware.policy.task.collector.service.vo.ClusterNode">
    UPDATE mo_cluster_node
    SET no_uuid   = #{noUuid}
      , info      = #{info}::jsonb
      , gpuinfo   = #{gpuinfo}::jsonb
      , memo      = #{memo}
      , delete_at = #{deleteAt} 
      , hash_val  = #{hashVal}
      , updt_uid  = #{updtUid}
      , updt_dt   = CURRENT_TIMESTAMP
    WHERE uid     = #{uid} 
  </update>

  <!-- Delete -->
  <delete id="deleteClusterNode" parameterType="com.kware.policy.task.collector.service.vo.ClusterNode">
    UPDATE mo_cluster_node
    SET delete_at = 'Y'
      , updt_uid  = #{updtUid}
      , updt_dt   = CURRENT_TIMESTAMP
    WHERE uid     = #{uid} 
  </delete>

<!-- Select -->
  <select id="selectClusterNodeList" resultType="com.kware.policy.task.collector.service.vo.ClusterNode">
    SELECT uid
         , no_uuid 
         , cl_uid
         , nm
         , info
         , gpuinfo
         , memo
         , delete_at
         , hash_val
         , reg_uid
         , reg_dt
         , updt_uid
         , updt_dt
    FROM mo_cluster_node
   WHERE delete_at = 'N'
  </select>
  
  <!-- Select -->
  <select id="selectClusterNode" resultType="com.kware.policy.task.collector.service.vo.ClusterNode" parameterType="com.kware.policy.task.collector.service.vo.ClusterNode">
    SELECT uid
         , no_uuid
         , cl_uid
         , nm
         , info
         , gpuinfo
         , memo
         , delete_at
         , hash_val
         , reg_uid
         , reg_dt
         , updt_uid
         , updt_dt
    FROM mo_cluster_node
    WHERE 1 = 1 
    <if test="uid != null">
      AND uid    = #{uid}
    </if>
    <if test="uid == null">
      AND cl_uid = #{clUid} 
      AND nm     = #{nm} 
     </if>
  </select>
  
   
  <!-- ************************ cluster workload *************************************  -->
	<!-- Insert -->
  <insert id="insertClusterWorkload" parameterType="com.kware.policy.task.collector.service.vo.ClusterWorkload">
    INSERT INTO mo_cluster_workload (
          ml_id
        , cl_uid
        , nm
        , info
        , memo
        , delete_at
        , hash_val
        , reg_uid
        , updt_uid 
    )VALUES (
    	  #{mlId}
    	, #{clUid}
    	, #{nm}
    	, #{info}::jsonb
    	, #{memo}
    	, #{deleteAt}
    	, #{hashVal}
    	, #{regUid}
    	, #{updtUid}
    )
  </insert>

  <!-- Update -->
  <update id="updateClusterWorkload" parameterType="com.kware.policy.task.collector.service.vo.ClusterWorkload">
    UPDATE mo_cluster_workload
    SET
        cl_uid    = #{clUid}
      , nm        = #{nm}
      , info      = #{info}::jsonb
      , memo      = #{memo}
      , delete_at = #{deleteAt}
      , hash_val  = #{hashVal}
      , updt_uid  = #{updtUid}
      , updt_dt   = CURRENT_TIMESTAMP
    WHERE ml_id   = #{mlId} 
  </update>

  <!-- Delete -->
  <delete id="deleteClusterWorkload" parameterType="com.kware.policy.task.collector.service.vo.ClusterWorkload">
    UPDATE mo_cluster_workload
    SET ml_id     = TO_CHAR(NOW(),'YYMMDDHH24MISS') || '_' || ml_id 
      , delete_at = 'Y'
      , updt_uid  = #{updtUid}
      , updt_dt   = CURRENT_TIMESTAMP
    WHERE ml_id     = #{mlId} 
  </delete>

<!-- Select -->
  <select id="selectClusterWorkloadList" resultType="com.kware.policy.task.collector.service.vo.ClusterWorkload">
    SELECT ml_id
         , cl_uid
         , nm
         , info
         , memo
         , delete_at
         , hash_val
         , reg_uid
         , reg_dt
         , updt_uid
         , updt_dt
    FROM mo_cluster_workload
   WHERE 1 = 1
   <if test="clUid != null">
     AND cl_uid = #{clUid} 
   </if>
   <if test="deleteAt != null">
     AND delete_at = #{deleteAt} 
   </if>
   <if test="deleteAt == null">
     AND delete_at = 'N' 
   </if>
  </select>
  
  <!-- Select -->
  <select id="selectClusterWorkload" resultType="com.kware.policy.task.collector.service.vo.ClusterWorkload" parameterType="com.kware.policy.task.collector.service.vo.ClusterWorkload">
    SELECT ml_id
         , cl_uid
         , nm
         , info
         , memo
         , delete_at
         , hash_val
         , reg_uid
         , reg_dt
         , updt_uid
         , updt_dt
    FROM mo_cluster_workload
    WHERE ml_id    = #{mlId} 
  </select>

  
  <!--     ************************ mo_cluster_history *********************************** -->
  
  <insert id="insertHistoryFromCluster" parameterType="HashMap">
  	INSERT INTO mo_cluster_history(tbl_nm, contents) 
		SELECT 'mo_cluster' tbl_nm, to_jsonb(t) contents
		  FROM (
		  	SELECT *  FROM mo_cluster 	WHERE uid = #{uid}
		  ) t
  </insert>

  <insert id="insertHistoryFromClusterNode"  parameterType="HashMap">
  	INSERT INTO mo_cluster_history(tbl_nm, contents) 
		SELECT 'mo_cluster_node' tbl_nm, to_jsonb(t) contents
		  FROM (
		  	SELECT * FROM mo_cluster_node WHERE uid = #{uid} and cl_uid = #{clUid}
		  ) t
  </insert>	
  
  <insert id="insertHistoryFromClusterWorkload"  parameterType="HashMap">
  	INSERT INTO mo_cluster_history(tbl_nm, contents) 
		SELECT 'mo_cluster_workload' tbl_nm, to_jsonb(t) contents
		  FROM (
		  	SELECT * FROM mo_cluster_workload WHERE ml_id = #{mlId}
		  ) t
  </insert>	
  
  <!--     ************************ mo_resource_usage_node *********************************** -->
  
      <insert id="insertResourceUsageNode" parameterType="com.kware.policy.task.collector.service.vo.ResourceUsageNode">
        INSERT INTO k_hybrid.mo_resource_usage_node (
            cl_uid,
            collect_dt,
            node_nm,
            results
        ) VALUES (
            #{clUid},
            #{collectDt},
            #{nodeNm},
            #{results}
        )
    </insert>
    
    <sql id="where_selectResourceUsageNode">
        <choose>
            <when test="startDt == null and endDt == null">
                collect_dt &gt;= CURRENT_TIMESTAMP - INTERVAL '30 minutes'
            </when>
            <when test="startDt != null and endDt == null">
                collect_dt &gt;= #{startDt}
            </when>
            <when test="startDt == null and endDt != null">
                collect_dt &lt;= #{endDt}
            </when>
            <otherwise>
                collect_dt BETWEEN #{startDt} AND #{endDt}
            </otherwise>
        </choose>
        <if test="clUid != null">
            AND cl_uid = #{clUid}
        </if>
        <if test="nodeNm != null">
            AND node_nm = #{nodeNm}
        </if>
    </sql>

    <select id="selectResourceUsageNode" resultType="com.kware.policy.task.collector.service.vo.ResourceUsageNode">
        SELECT 
            cl_uid,
            collect_dt,
            node_nm,
            results,
            reg_dt
        FROM k_hybrid.mo_resource_usage_node 
        WHERE 
        <include refid="where_selectResourceUsageNode"/>
        ORDER BY collect_dt DESC
        <if test="pageNumber != null and pageSize != null">
          LIMIT #{pageSize} OFFSET (#{pageNumber} - 1) * #{pageSize}
        </if>
    </select>

    <select id="selectResourceUsageNodeAllByClUid" resultType="com.kware.policy.task.collector.service.vo.ResourceUsageNode">
        SELECT 
            cl_uid,
            collect_dt,
            node_nm,
            results,
            reg_dt
        FROM k_hybrid.mo_resource_usage_node 
        WHERE cl_uid = #{clUid}
          AND collect_dt BETWEEN #{startDt} AND #{endDt}
    </select>
  
  
  <!--     ************************ mo_resource_usage_pod *********************************** -->
  <sql id="where_selectResourceUsagePod">
        <choose>
            <when test="startDt == null and endDt == null">
                collect_dt &gt;= CURRENT_TIMESTAMP - INTERVAL '30 minutes'
            </when>
            <when test="startDt != null and endDt == null">
                collect_dt &gt;= #{startDt}
            </when>
            <when test="startDt == null and endDt != null">
                collect_dt &lt;= #{endDt}
            </when>
            <otherwise>
                collect_dt BETWEEN #{startDt} AND #{endDt}
            </otherwise>
        </choose>
        <if test="clUid != null">
            AND cl_uid = #{clUid}
        </if>
        <if test="mlId != null">
            AND ml_id = #{mlId}
        </if>
        <if test="podUid != null">
            AND pod_uid = #{podUid}
        </if>
    </sql>
    
  <insert id="insertResourceUsagePod" parameterType="com.kware.policy.task.collector.service.vo.ResourceUsagePod">
        INSERT INTO k_hybrid.mo_resource_usage_pod (
             collect_dt, 
             cl_uid, 
             ml_id, 
             pod_uid, 
             results
         ) VALUES (
             #{collectDt}, 
             #{clUid}, 
             #{mlId}, 
             #{podUid}, 
             #{results}
         )
    </insert>

    <select id="selectResourceUsagePod" parameterType="com.kware.policy.task.collector.service.vo.ResourceUsagePod" resultType="com.kware.policy.task.collector.service.vo.ResourceUsagePod">
        SELECT * FROM k_hybrid.mo_resource_usage_pod 
         WHERE
         <include refid="where_selectResourceUsageNode"/> 
          ORDER BY collect_dt DESC
        <if test="pageNumber != null and pageSize != null">
          LIMIT #{pageSize} OFFSET (#{pageNumber} - 1) * #{pageSize}
        </if>
    </select>

    <select id="selectResourceUsagePodAllByMlId" parameterType="String" resultType="com.kware.policy.task.collector.service.vo.ResourceUsagePod">
        SELECT * FROM k_hybrid.mo_resource_usage_pod 
        WHERE ml_id = #{mlId}
          AND collect_dt BETWEEN #{startDt} AND #{endDt}
    </select>
   
</mapper>

