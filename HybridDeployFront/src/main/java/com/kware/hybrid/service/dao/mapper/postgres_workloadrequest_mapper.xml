<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="workloadRequestMapper">

    
    <!-- Select By Primary Key -->
    <select id="selectRunningWrokloadByMlid" parameterType="string" resultType="com.kware.hybrid.service.vo.WorkloadRequestVO">
		SELECT murq.uid
			, murq.ml_id
			, murq.nm AS ml_nm
			, coalesce(mcw.cl_uid,murp.cl_uid) AS cl_uid
			, mc.nm AS cluster_nm
			/* , mcw.info AS api_json */
			, (mcw.info - 'resources' - 'mlStepCode') AS api_json
			, (mrup.prom_pods) AS prompods_json
			, murq.request_json -> 'request' AS request_json
			, TO_CHAR(murq.request_dt, 'YYYY-MM-DD HH24:MI:SS') request_dt
			, TO_CHAR(murq.noti_dt, 'YYYY-MM-DD HH24:MI:SS') noti_dt
			, murp.info -> 'response' AS response_json
			, murp.cause as responseCause
			, mcw.usage_info
			, TO_CHAR(murq.complete_dt, 'YYYY-MM-DD HH24:MI:SS') complete_dt
		FROM k_hybrid.mo_user_request murq
		LEFT JOIN k_hybrid.mo_cluster_workload mcw ON mcw.ml_id LIKE murq.ml_id || '%'
		LEFT JOIN (
			    SELECT 
			        a.ml_id,
			        jsonb_agg(a.results ORDER BY a.results -> 'createdTimestamp') AS prom_pods
			    FROM k_hybrid.mo_resource_usage_pod a
			    JOIN k_hybrid.mo_cluster_workload b 
			        ON b.ml_id LIKE a.ml_id || '%'
			    WHERE a.last_at = 'Y'
			      AND a.ml_id = #{mlId}
			      AND (a.results ->> 'createdTimestamp')::timestamp &gt;= (b.info ->> 'createdAt')::timestamp
			    GROUP BY a.ml_id
			) mrup ON mrup.ml_id = murq.ml_id
		LEFT JOIN k_hybrid.mo_user_response murp ON murq.uid = murp.req_uid
		LEFT JOIN k_hybrid.mo_cluster mc ON (mc.uid = mcw.cl_uid OR mc.uid = murp.cl_uid)
		WHERE 1 = 1 
		 AND murq.noti_dt IS NOT NULL 
		/* AND mcw.delete_at = 'N' */ 
		 AND murq.ml_id = #{mlId}
    </select>

    <!-- Select All -->
    <select id="selectRunningWrokload" resultType="com.kware.hybrid.service.vo.WorkloadRequestVO">
        SELECT murq.uid
			, murq.ml_id
			, murq.nm AS ml_nm
			, coalesce(mcw.cl_uid,murp.cl_uid) AS cl_uid
			, mc.nm AS cluster_nm
			/* , mcw.info AS api_json */
			, (mcw.info - 'resources' - 'mlStepCode') AS api_json
			, (mrup.prom_pods) AS prompods_json 
			, murq.request_json -> 'request' AS request_json
			, TO_CHAR(murq.request_dt, 'YYYY-MM-DD HH24:MI:SS') request_dt
			, TO_CHAR(murq.noti_dt, 'YYYY-MM-DD HH24:MI:SS') noti_dt
			, murp.info -> 'response' AS response_json
			, murp.cause as responseCause
			, mcw.usage_info
			, TO_CHAR(murq.complete_dt, 'YYYY-MM-DD HH24:MI:SS') complete_dt
		FROM k_hybrid.mo_user_request murq
		LEFT JOIN k_hybrid.mo_cluster_workload mcw ON mcw.ml_id LIKE murq.ml_id || '%'
		LEFT JOIN (
			    SELECT 
			        a.ml_id,
			        jsonb_agg(a.results ORDER BY a.results -> 'createdTimestamp') AS prom_pods
			    FROM k_hybrid.mo_resource_usage_pod a
			    JOIN k_hybrid.mo_cluster_workload b 
			        ON b.ml_id LIKE a.ml_id || '%'
			    WHERE a.last_at = 'Y'
			      AND (a.results ->> 'createdTimestamp')::timestamp &gt;= (b.info ->> 'createdAt')::timestamp
			    GROUP BY a.ml_id
			) mrup ON mrup.ml_id = murq.ml_id
		LEFT JOIN k_hybrid.mo_user_response murp ON murq.uid = murp.req_uid
		LEFT JOIN k_hybrid.mo_cluster mc ON (mc.uid = mcw.cl_uid OR mc.uid = murp.cl_uid)
		WHERE 1 = 1 
		 AND murq.noti_dt IS NOT NULL 
		/* AND mcw.delete_at = 'N'*/ 
		ORDER BY uid desc
		<if test="pageNumber != null and pageSize != null">
          LIMIT #{pageSize} OFFSET (#{pageNumber} - 1) * #{pageSize}
        </if>
    </select>
    
     <select id="selectRunningWrokloadCount" resultType="int">
        SELECT count(*) 
		FROM k_hybrid.mo_user_request murq
		WHERE 1 = 1 
		 AND murq.noti_dt IS NOT NULL 
		/* AND mcw.delete_at = 'N' */ 
    </select>
    
    <select id="selectPodUsage" resultType="com.kware.hybrid.service.vo.ResourcePodUsageVO">
	    SELECT
			 TO_CHAR(collect_dt, 'YYYY-MM-DD HH24:MI:SS') AS collect_dt
			, ml_id
			, pod_uid
			, (results -> 'usageCpu1m')::NUMERIC AS usage_cpu
			, (results -> 'usageMemory')::NUMERIC AS usage_memory
			, (results -> 'usageNetworkIo1m')::NUMERIC AS usage_network
			, (results -> 'musgeGpuMap')::TEXT usage_gpu
			, results ->> 'statusPhase' statusPhase
		FROM k_hybrid.mo_resource_usage_pod
		WHERE 1 = 1
		/* AND results ->> 'statusPhase' = 'RUNNING' */
		 AND ml_id = #{mlId}
		 AND pod_uid = #{podUid}
		<if test="collectDt != null and collectDt != ''">
		 AND collect_dt &gt; #{collectDt}::TIMESTAMP + INTERVAL '1 second'
		</if>
		ORDER BY collect_dt
    </select>
    
    
</mapper>
